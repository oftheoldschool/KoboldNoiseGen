float voronoiNoise4Base(VoronoiMetalParameters params, float4 coord) {
    int xr = voronoiFastFloor(coord.x);
    int yr = voronoiFastFloor(coord.y);
    int zr = voronoiFastFloor(coord.z);
    int wr = voronoiFastFloor(coord.w);

    float distance1 = MAXFLOAT;
    float distance2 = MAXFLOAT;
    ulong closestHash = 0;

    for (int xi = xr - 2; xi <= xr + 2; xi++) {
        for (int yi = yr - 2; yi <= yr + 2; yi++) {
            for (int zi = zr - 2; zi <= zr + 2; zi++) {
                for (int wi = wr - 2; wi <= wr + 2; wi++) {
                    ulong hash = voronoiHash4D(params.seed,
                                               (long)xi * VORONOI_PRIME_X,
                                               (long)yi * VORONOI_PRIME_Y,
                                               (long)zi * VORONOI_PRIME_Z,
                                               (long)wi * VORONOI_PRIME_W);

                    float vecX = (float)xi + params.jitter * (voronoiHashToFloat(hash) - 0.5) * 2.0;
                    float vecY = (float)yi + params.jitter * (voronoiHashToFloat(hash >> 16) - 0.5) * 2.0;
                    float vecZ = (float)zi + params.jitter * (voronoiHashToFloat(hash >> 32) - 0.5) * 2.0;
                    float vecW = (float)wi + params.jitter * (voronoiHashToFloat(hash >> 48) - 0.5) * 2.0;

                    float distance = voronoiCalculateDistance(params.distanceFunction, params.minkowskiP,
                                                              coord.x - vecX, coord.y - vecY, coord.z - vecZ, coord.w - vecW);

                    if (distance < distance1) {
                        distance2 = distance1;
                        distance1 = distance;
                        closestHash = hash;
                    } else if (distance < distance2) {
                        distance2 = distance;
                    }
                }
            }
        }
    }

    switch (params.returnType) {
        case VoronoiMetalReturnType::distance:
            return distance1;
        case VoronoiMetalReturnType::cellValue:
            return voronoiHashToFloat(closestHash);
        case VoronoiMetalReturnType::distance2:
            return distance2;
        case VoronoiMetalReturnType::distance2_distance1:
            return distance2 - distance1;
    }
    return distance1;
}

kernel void voronoiNoise4(
    constant VoronoiMetalParameters& params [[ buffer(0) ]],
    constant float4* coords [[ buffer(1) ]],
    device float* out [[ buffer(2) ]],
    uint index [[ thread_position_in_grid ]]
) {
    out[index] = voronoiNoise4Base(params, coords[index]);
}
